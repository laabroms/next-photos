// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Product {
    id                     String   @id @default(uuid())
    name                   String
    priceInCents           Int
    description            String
    isAvailableForPurchase Boolean  @default(true)
    createdAt              DateTime @default(now())
    updatedAt              DateTime @updatedAt
    orders                 Order[]
    photo                  Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
    photoId                String
}

model Photo {
    id           String    @id @default(uuid())
    name         String
    description  String
    width        Int       @default(200)
    height       Int       @default(200)
    imageId      String
    isVisible    Boolean   @default(true)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    orders       Order[]
    category     Category  @relation(fields: [categoryId], references: [id])
    categoryId   String
    product      Product[]
    displayOrder Int       @default(99)
}

model Category {
    id           String   @id @default(uuid())
    name         String   @unique
    description  String
    imageId      String
    width        Int      @default(200)
    height       Int      @default(200)
    isVisible    Boolean  @default(true)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    photos       Photo[]
    displayOrder Int      @default(99)
}

model User {
    id        String   @id @default(uuid())
    isAdmin   Boolean  @default(false)
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    orders    Order[]
}

model Order {
    id               String   @id @default(uuid())
    pricePaidInCents Int
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    userId    String
    photoId   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Restrict)
    product   Product? @relation(fields: [productId], references: [id])
    productId String?
}
